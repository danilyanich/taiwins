<protocol name="taiwins_console">
  
  <interface name="tw_console" version="1">
    <description summary="the console interface of taiwins">
      This interface acts as a shell to submit multiple commands to the
      server. It is also the port to do fork-exec.

      It has a difficult structure, the procedure complex, 1. When keybinding
      actived, server indicates the client to start the commander. 2. The client
      then needs to create the surface and request an UI element in order to
      draw on it. 3. Then after the commit, the UI appears and works like other
      application. 4. The client can choose to close the destroy the surface and
      the ui element and do nothing. 5. If it needs submit information to the
      server. It can do that now. 6. Then If server needs it to exec an
      application. It will pass the `exec` command to the client.

      The first 3 event/request works like TCP/IP, clients waits for ACK to do
      the next. But once started. It can perform quickly.
    </description>
    <event name="start">
      <description summary="instruct the client to call launch">
	launching information about the launcher itself
      </description>
      <arg name="width" type="fixed"/>
      <arg name="height" type="fixed"/>
      <arg name="scale" type="fixed"/>
    </event>

    <request name="launch">
      <description summary="Actaully start the launcher">
	This request must act as an action results from start event
      </description>
      <arg name="ui_elem" type="new_id" interface="tw_ui"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="submit">
      <description summary="indicate the compositor to close the launcher surface">
	The launcher should do the submit request before the fork-exec. This
	make sure that compositor has enough up-to-dated configuration
	buffer, then it waits the wl_callback to actually exec the application.
	This is the only time that compositor updates its knowledge
	about configuration buffer to avoid the racing, you may still have
	problem when one application launches from launcher, the other starts
	somewhere else.
      </description>
      <arg name="buffer" type="object" interface="wl_buffer"/>
      <arg name="exec_id" type="uint">
	<description summary="exec_id is records current index of process starting"/>
      </arg>
    </request>

    <event name="exec">
      <description summary="indicate the launcher could perform fork-exec">
	it is a response from the submit request
      </description>
      <arg name="exec_id" type="uint"/>
    </event>

    <event name="application_configure">
      <description summary="dynamically emit the application configure">
	After launching application, we could still change the preference of the
	application, when it becomes floating, tiled, scale, size change, etc.

	Notice that this event doesn't update the buffer.
      </description>
      <arg name="app_name" type="string"/>
      <arg name="floating" type="uint"/>
      <arg name="scale" type="fixed"/>
    </event>

    <!-- start-submit pair -->
    <enum name="conf">
      <entry name="stride" value="4"
	     summary="given wl_surface has another role"/>
      <entry name="num_decisions" value="100"
	     summary="xdg_shell was destroyed before children"/>
    </enum>
  </interface>
  
</protocol>
