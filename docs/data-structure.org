So far I've made so many data structures in *taiwins* for the organizing code,
the problem is that every structure created on the fly, so the history of the
design carries on.

* The rotten issues in the project
The short-sighted design of the taiwins, lack of knowledge and design skills;
Lack of understanding of wayland and weston design (personally I think weston has
way more crumbosome design).

Some quick hacks that I did to get things working. For example, I used to think
every client has only one ~wl_surface~ and I was immediately wrong, also the way
I handled the time counter (with two threads), come on.


* Client data structures
  - wl_global :: the global structure that fits the need of an wayland client.
		 It contains things like ~wl_shm~, ~wl_shm_format~,
		 ~wl_compositor~, ~wl_display~.
    * Inputs :: I only have one input per client, fair enough, why
    would you need two seats if only one person operates it.

  - tw_event_loop :: introduced for ~tw_shell~ to handle system generated events
		     like time lapse and wayland protocol events.
		     * tw_event :: this leads to another interface for use to
		     create its own event and watch the event. It didn't go as
		     far as the ~wl_protocols~ where you create custom protocols
		     and have handlers for them.
** UIs
   - app_surface :: now you have an app surface, it kinda binds to an
		    ~wl_surface~.

** Taiwins Shell specific structure.
