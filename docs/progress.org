* Stage one: basic libweston compositor
  - have interface(shell and launcher)
  - cursor, keyboard are fully functioned.
  - be able to launch and close applications.

** [100%] fully nuklear backend (utilizing app-surface and)
     - ~nk_input_key~ and ~nk_input_unicode~ carries the text input. But the
       input box details is unknown.
*** CANC draw another triangle above nuklear widget
*** DONE research the mouse clicking problem
    Nvidia driver specific problem.
** [100%] Taiwins-shell
*** CANC lua support
    this can be *later*. It is very independent.
**** DONE adding text to widget APIs.
*** DONE memory leak checking
    My code does not have memory leak, the only problem happens with opengl drivers

**** Possible leaking ::
     - malloc but no free(I probably don't have that).
     - opened file without closing(socket, epoll, log file)
     - other system resources I am not aware of
     - libweston(-eglstream) leaks, since nvidia's implementation is not very
       serious
     - ~wl_callback~ :: there may be a wl_callback not destroyed. For this we
			would have to store the wl_callback specifically

**** DONE nuklear memory checking
**** DONE cairo memory checking


** [100%] Taiwins-launcher
*** DONE showing the luancher window
*** DONE implement text_editing                                      :client:
    Tab works
*** DONE fork-exec                                                   :client:

*** DONE change the ui element start or close implimentation

* TODO [85%] Stage two: feature completion
  - supporting multiple monitors/seats.
  - weston view focus defocus
  - a few different extensions.
  - lua support for writing extensions.
  - different layouting support
  - resize EGL windows.
  - compositing
** DONE [100%] [staged] server-side optimization
*** DONE setup the xkb context, again, related to [[configuration]]
    it is done by calling `weston_compositor_set_xkb_rule_names` which will not
    take any effect since the implementation right now will not do anything at
    runtime. Find a way to convince the weston guys to merge the patch.
*** DONE [#B] passing server events to shell, switch workspace. e.g.
    - switch workspace.
    - keybindings activated, this is a bit hard, you need to add callbacks in
      the binding system. Or maybe cancel this feature.
    - notificiation support.
    - menu/widgets
    - wallpaper
    - desktop events
*** DONE dynamically choosing workspace layouts.
*** DONE rename all the ctype functions.
    I did move them into uppercase macros.

*** DONE singals for adding new output and seats
*** CANC change the keyboard grab allowing the long pressing.
    This is done in the clients
*** DONE updated to libweston-5
    - figure out the bug for libdrm backend.
      turned out it is my stupid pointer assignment
*** DONE switch bindings into our ~run_binding~ callbacks
    Finally we achieved it by using keyboard grab. Previously I used grab to
    archeive double click
*** DONE have functional workspace implementation
    - workspace is implemented as keybindings
*** DONE refactring that layout implementation in workspace, it is ugly
*** DONE taiwins close, reload functions.
*** DONE renaming tw_shell -> shell, tw_desktop -> desktop.
   so the protocols can directly use tw_shell instead of taiwins_shell

** DONE [100%] <<configuration>> (current stage)
*** DONE [#A] hot config I :: general hook
    all the components(I mean right now shell, console and desktop are all like
    components of the compositor, they follow the same functions, in C++, they
    would share the same baseclass). And all the components can listen on some
    keys in the config, so they get notified when value changed.
     - ~config.setbool(key, bool_value)~
     - ~config.setstring(key, string_value)~
     - ~config.setcolor(key, color_value)~
     - ...
*** DONE [#A] hot config III :: taiwins_config_lua_plugin or other better names,
    components like shell, desktop would be able to register for lua_bindings,
    so it could provide plenty of functionalities

    At this point we should probabliy know that totally *try-apply* approach may
    not be totally realistic. If any part of lua code ran, it would have side
    effect
*** DONE [100%] shell configuration (server)
**** DONE panel pos
**** DONE init wallpaper
**** DONE init widget [[nuklear luabinding]]
**** DONE set menus
*** DONE desktop configuration
**** DONE get workspace
**** DONE setup layout,
*** DONE backend configuration
**** CANC monitor/head scale/resolution, all that setup
     scale is not possible at current stage.
**** DONE monitor flipping, how you are gonna do with flipping??

*** DONE global configuration
**** DONE xkb context
**** DONE kb_repeat/delay(keyboard)
**** CANC get outputs, outputs are different than heads, be able to control output creation process.
     Not possible in current stage
**** DONE set idle time.(shell does that now)

*** DONE introduce the lua code

*** DONE styles, nuklear and other widget styles.
    - background color.
    - Font size, font selection.
*** DONE keyboard callbacks, this writes to a buffer, apparently.
*** DONE move all the binding names in the config, so we can freeze ~desktop.c~
    right now we do have this built-in bindings and we would like to introduce
    custom lua bindings based on compositor functions.

    One simple solution would be giving names. Since shell/desktop/console
    provides those functions, we hope to keep them local

** DONE [100%] libweston-desktop implementation                      :server:
*** DONE [#C] implement the libweston-desktop protocol                :proto:
*** DONE desktop layer architecture
*** DONE simple random floating implementation
*** DONE tiling layout
*** DONE decoupling the desktop implementation                    :refactory:
*** DONE include a ~last-focused-view-list~ per workspace?
    luckly that we have ~weston_desktop_suface_set_user_data~, it seems to fit
    perfectly in that position

** DONE [100%] client shell optimization
*** DONE take wallpaper from sever.
*** DONE locker implemenation
**** DONE create lock surface
**** DONE introducing PAM.
**** DONE hiding cypher
*** DONE app_surface flags, calculate app surface
*** DONE [#C] take widgets from server and apply lua bindings.
**** DONE loading widgets
**** DONE widget nuklear bindings
**** DONE implement clip board in nk_backends
**** DONE a calendar implementation
*** DONE ~nk_impl_shell_surface~ and ~nk_impl_xdg_surface~
*** DONE huge amount of work with console.
*** DONE resize window through idle task in the event queue.
*** DONE add udev monitoring and inotify monitoring to event_queue
*** DONE properly handling the frame callbacks for ~app_surface~
    We try to implement as agnostic as possible. 1: ~do_frame~ no longer test
    ~need_animation~ and request frames. 2: input callback stays as the
    independed logic, you don't need an additional set of input handler for
    the frame case.

    Once ~app_surface_request_frame~ triggers, it will request a frame and
    execute ~do_frame~ in the done callback. And request another if it still
    drives the animation. On the other hand, the input callbacks will also call
    the ~do_frame~. But they do not request new frames. So those are seperated.

    Only problem is that nk_backend has an optimization, it skip the commit if
    possible, if we are in the frame. We have no choice but commit even if there
    is nothing new to show. Right now nuklear backends do a empty commit if no
    thing happens.

*** DONE implement scale for shell and console
    This is partially solved for now, I get blurry text as output as compaired
    to other elements. Need to revisit it later
*** DONE move event_queue into wl_globals so we can access it in app_surface
*** DONE switch to epoll on wl_display
    - possible solution :: maybe we can use epoll on wl_display, and add it to
	 our event_queue, so we can call ~wl_display_dispatch_pending~. We don't
	 need another thread anymore.
*** CANC resize EGL window
    I didn't do it eventually, using different wl_surface become a solution
*** DONE shell panel refactoring
    replace the panel to nuklear implementation
*** DONE fix the cursor input problem(maybe just forget about the cursor frame callback), what is this??
*** CANC move the wl_cursor surface into shell?
    Maybe I am wrong. I do need the cursor for every application.
*** DONE widget surface launch code.
*** DONE second widget, reading batteries
*** DONE make changes into ~tw_event_queue~
    ~tw_event_queue~ now supports more operations, you can add onetime timer then
    tell the ~queue~ to delete it afterwards, and you can change fd at runtime
    to watch on different files.

*** DONE find a way to add leading space in panel
    ~nk_spacing~ is the good solution, but you need to calculate the layout size
*** DONE fix the multiple launching bug in the panel
*** CANC add another row for panel to have better look?
*** DONE change the way the nk_button look for the icons.
*** DONE decide the way to render icons more properly.
    Right now we rely on font awesome.

    The ideal solution is render icons into glyphs. More conviniently is by
    using SVGs, since you can find them anymore. But there is no valid c or
    c++ implementation of svg2ttf. We need to rely on fontawesome for now. Now
    you need to include this [https://github.com/juliettef/IconFontCppHeaders]
    for mapping unicode symbols.
*** CANC nk_vulkan backend removal, its not doable, nvidia is not supporting
    nvidia supports vk_khr_wayland_surface now, but I don't have a nvidia
    desktop anymore.
*** DONE intergrate nk_wl_egl into nk_wl_backend
    I implemented a template header of ~nk_wl_internal~, but never actually
    applies it to nk_wl_egl, it should be done very soon, so I can totally
    remove the deprecated functions.
*** DONE nk_cairo_backend multiple font support
** DONE [100%] console implementation
*** DONE renaming launcher into console, since it will does much more than just launching
*** DONE allow launcher to quit instead of launch weston-terminal all the time
*** DONE take example of existing launcher application like (krunner, ulauncher...)
*** DONE define console_module
*** DONE drawing console modules
**** CANC offsetting search results
     The idea here is simple, if we keep pressing DOWN(or UP), we would end up
     going out of bounds, having the APP detecting that (or writing a GUI
     helpers for that)
**** DONE debug the console module searching
**** DONE connect the console module exec
**** CANC replace button with selectables so you can do some control
      
** DONE [100%] protocols                                              :proto:
*** DONE `tw_output` protocols to represent logical output

** TODO installing scripts and publish
   At this stage taiwins is working and very unusable. Though many future
   developement needs to be done. But we should get voice out now.
*** DONE chose the corect license(GPL decided)
*** CANC write github pages (README done for twclient)
*** DONE add CI
*** TODO find a way to get the voice out

* TODO [16%] Stage three: extensions/ post-pub features
** TODO ADD DAMAGE SUPPORT in drawing!
** TODO [75%] tw_theme protocol
*** DONE creating the taiwins_theme header
*** TODO tw_theme protocol
*** CANC c files
** DONE Add multiple font support
   now twclient supports multiple fonts
** TODO patch 3rdparty libraries
   weston: output configure in the run time.
** TODO [0%] new features
*** TODO add dbus support
    dbus can be used to sending commands to many services (networkmanager for
    example), makes it easy to write shell widgets.
*** TODO move workspace_add_view in the commit event.
    At that time, you would know about view geometry, it would be better for
    floating layer.
*** TODO set animations?
    - animation for desktop apps and widgets.
*** TODO backend configuration
    libweston haven't properly support multi display yet.
**** TODO adding/disabling new output
**** TODO clone mode and set output layout
**** TODO dynamic changing output scale

*** TODO utilise weston-animations
    fade/zoom/move, it should be relative easy to use.

*** TODO adding support for notification. All those can be implement
*** TODO adding support for menu(right-click),
    special case we need to handle for background, which is not ideal for
    shm_buffer implementation. I think you will have no choice but have a custom
    grab interface.

    right click and left click provides different functions
    - preferably right click open an menu and left click opens selection.
    - for this work you need the support for resizing
*** TODO better locker/using dot instead of stars
*** TODO nku_branch 
    For many widgets to work smoothly it is ensentially to have wrapper around
    nuklear, have a branch to give some common routines. Then you can easily
    finish decorating consoles
*** TODO load only necessary icons
    we load every thing now, it crashes for themes like deepin, which has
    millions of icons out there. Chances are, you are not needing them.
*** TODO create file type for taiwins icon cache.
** TODO possibly remove dynamic allocated objects
    reduce number of mallocs and memory fragmentation(I just added a lot in console)
    - recent_view
    - tiling_view tree
    - tiling_output_list where it has a root of tiling
    - tw_ui(for console)
    - keyboard_container for taiwins_binding
    - taiwins_config (temporary)
    - taiwins_binding (temporary)
    - lua_state
    - taiwins_config options(a vector)
** DONE deal with scale in font
    previously we solved the scale but left the problem with blury text. Need to
    revisit the nuklear backends for (cairo/egl) to solve it.
*** TODO ML based layout
*** TODO rendering/compositing optimization.
  - screen capture and screen record(audio support?).
  - westons's zoom support.

*** TODO update with damage (pixman_region)
    currently you do only ~wl_surface_damage(0, 0, w, h)~, which causes whole
    buffer to redraw, I think there is a better solution for that.

    If you check the doc, you are responsible for knowing where is the damage,
    especially for the double buffer case. It is quit unsure what is the damage
    there for the buffers.
*** CANC svg2ttf implementation
*** TODO client search buffer                                         :proto:
    for this to work, we probably will need ~radix tree~ or ~trie~ or hash
    table.

* TODO following up weston development
** TODO eglstream patches
** TODO pipewire(can be used to stream wayland)
** TODO HDCP content protection

* [12%] Bugs
** TODO [#A] recent view has some bugs,
   - for example, if an application in fullscreen mode, when you toggle views,
     the other views does not show up.
   - Othe bugs

** a completion based text_edit
   - ~nk_egl_get_key~ gets NoSymbol very 2 frames, so if you press Tab twice,
     what you get is Tab -> NoSymbol -> Tab -> NoSymbol. NoSymbol resets the
     state.
   - solution :: return on NoSymbol

** HARD!! compositor doesn't emit the ~done~ event for clients.
   - ~frame_callback~ was created in ~surface_state~, moved to ~surface~ at
     commit, emit ~done~ at repaint. And repaint only works if you have a view
     in the compositor. ~weston_view_unmap~ removes the view from compositor. In
     this case, the ~frame_callback~ stayed in the surface.

     In our case for the ui element, we need the frame to start and finish well,
     since next frame may starts with different content.
*** failed solution( LAGGY ):
    - unmap the view :: unmap the view removes view immediately out of any of
			~layer_list~, compositor's ~view_list~. So the frame
			~done~ would never get called either. So when the views
			move back to the layer let's say, next repaint should
			emit ~done~. However, at ~set_launcher~, we will
			immediately have another ~commit~, this can happen
			before next repaint(and it happens every time). In other
			words, so we will have one commit ahead, thus causes
			lag.
    - uses a hidden layer :: does the same thing above, since
	 ~weston_output_repaint~ does the ~view_list~ building. The view moves
	 out of the compositor before sending done.
    - do not commit in client :: cannot guarantee no commits after then submit
	 request, will also causes the lag as well.
*** UGLY solution
    - send done yourself :: copy the frame_callback struct then send the done.
*** Final solution (using frame_signal)
    the frame_signal in the ~weston_output~ struct is for the recorder. But it
    suits our case

** TODO somehow EGL did not have effects on the first draw call
   currently I have to use background color as a hack, which I hate it, or you
   can just have empty draw call
** TODO libEGL warning: FIXME: egl/x11 doesn't support front buffer rendering.
   Seems has something to do with ~EGLMakeCurrent()~.
** DONE find out why all the code point becomes `?`
   the ~nk_rune~ has to be available all the time as nuklear does not like to
   manage memory, so you cannot just pass an temporary address.
** TODO nuklear input handling has problems, the button clicked state retains
** TODO nvidia egl driver keeps giving me errors after closing an app
** TODO EGL memory leak
   after testing with cairo backend, I can be sure that my code does not contain
   any memory leak, so the problem lies within EGL side

   Call EGLterminate and EGLreleaseThreads.
** TODO fix the memory leak in the ~taiwins_server~, massive leaks related to console implementation
** TODO fix the memeory leak here:
    #0 0x7fc95f38dada in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:144
    #1 0x56430a040cd6 in vector_erase /home/developer/Projects/taiwins/3rdparties/ctypes/src/vector.c:203
    #2 0x56430a039125 in vtree_node_remove /home/developer/Projects/taiwins/3rdparties/ctypes/src/tree.h:76
    #3 0x56430a03acd7 in tiling_view_erase /home/developer/Projects/taiwins/server/desktop/layout_tiling.c:313
    #4 0x56430a03d337 in tiling_del /home/developer/Projects/taiwins/server/desktop/layout_tiling.c:547
    #5 0x56430a03eba8 in emplace_tiling /home/developer/Projects/taiwins/server/desktop/layout_tiling.c:745
    #6 0x56430a03509e in arrange_view_for_layout /home/developer/Projects/taiwins/server/desktop/workspace.c:140
    #7 0x56430a03519c in arrange_view_for_workspace /home/developer/Projects/taiwins/server/desktop/workspace.c:159
    #8 0x56430a036281 in workspace_remove_view /home/developer/Projects/taiwins/server/desktop/workspace.c:336
    #9 0x56430a02fa5b in twdesk_surface_removed /home/developer/Projects/taiwins/server/desktop/desktop.c:189
    #10 0x7fc95f230604  (/usr/lib/libweston-desktop-7.so.0+0x9604)
