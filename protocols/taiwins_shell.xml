<protocol name="taiwins_desktop">

  <interface name="taiwins_shell" version="1">
    <description summary="create desktop widgets and helpers">
      Traditional user interfaces can rely on this interface to define the
      foundations of typical desktops. Currently it's possible to set up
      background, panels and locking surfaces.
    </description>

    <request name="set_background">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>
    <request name="set_widget">
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="output"  type="object" interface="wl_output"/>
      <arg name= "x" type="uint"/>
      <arg name= "y" type="uint"/>
    </request>
    <request name="hide_widget">
      <description summary="destroy the widget view at the server side"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_panel">
      <description summary="show panel for the output">
	Panel is the for output, any input will go to commander
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <event name="configure">
      <description summary="send expect configuration to client">
	expected size from the server, the clients are expected to attach same
	dimension of buffer to the surface. Common usage like background, for
	example, it will be the same dimension of output. For commander, it will
	have longer width than height if vertical and vice versa.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="scale" type="uint"/>
      <arg name="edges" type="uint"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
    </event>

  </interface>

  <!-- launcher interface -->
  <interface name="taiwins_launcher" version="1">
    <description summary="the launcher interface of taiwins">
      The launcher starts with set_launcher, which registers the launcher show
      the surface. Before it can launch, the corresponding window information is
      given through hint event. The launcher just update the information for
      next launching. Once the enter is pressed, the launcher emits the event
      submit, the server receive the information about corresponding
      applications.
    </description>

    <request name="set_launcher">
      <description summary="registre the launcher."/>
      <arg name="surface" type="object" interface="wl_surface"/>
      <!-- the second param is the launcher informaiton shared with server -->
      <arg name="buffer" type="object" interface="wl_buffer"/>
    </request>

    <request name="submit">
      <description summary="user call this when issue the command">
	The launcher should do the submit request before the fork-exec. This
	also masks that the application menu is realy, so when compositor
	receive client creating events, it has the correct configure for the
	application.

	This requests closes the launcher window as well.
      </description>
    </request>


    <event name="application_configure">
      <description summary="dynamically emit the application configure">
	After launching application, we could still change the preference of the
	application, when it becomes floating, tiled, scale, size change, etc.
      </description>
      <arg name="app_name" type="string"/>
      <arg name="floating" type="uint"/>
      <arg name="scale" type="fixed"/>
    </event>

    <event name="hint">
      <description summary="information request for launcher, only before the
			    opening launcher">
	launching information about the launcher itself
      </description>
      <arg name="width" type="fixed"/>
      <arg name="height" type="fixed"/>
      <arg name="scale" type="fixed"/>
    </event>

    <!-- start-submit pair -->


    <enum name="conf">
      <entry name="stride" value="4"
	     summary="given wl_surface has another role"/>
      <entry name="num_decisions" value="100"
	     summary="xdg_shell was destroyed before children"/>
    </enum>
  </interface>

  <!-- <interface name="taiwins_launcher" version="1"> -->

  <!-- </interface> -->

</protocol>
